/*

动态规划的本质，是对问题状态的定义和状态转移方程的定义。

https://www.zhihu.com/question/23995189

比如这样一个弱智的棋盘问题：从棋盘的左上角到达右下角最短需要几步。
答案很显然，用这样一个弱智的问题是为了帮助我们理解阶段和状态。
某个阶段确实可以有多个状态，正如这个问题中走n步可以走到很多位置一样。
但是同样n步中，有哪些位置可以让我们在第n+1步中走的最远呢？
没错，正是第n步中走的最远的位置。换成一句熟悉话叫做“下一步最优是从当前最优得到的”。
所以为了计算最终的最优值，只需要存储每一步的最优值即可，
解决符合这种性质的问题的算法就叫贪心。
如果只看最优状态之间的计算过程是不是和非波那契数列的计算很像？
所以计算的方法是递推


所以一个问题是该用递推、贪心、搜索还是动态规划，
完全是由这个问题本身阶段间状态的转移方式决定的！

每个阶段只有一个状态->递推；

每个阶段的最优状态都是由上一个阶段的最优状态得到的->贪心；

每个阶段的最优状态是由之前所有阶段的状态的组合得到的->搜索；

每个阶段的最优状态可以从之前某个阶段的某个或某些状态直接得到而不管之前这个状态是如何得到的->动态规划。


http://www.hawstein.com/posts/dp-novice-to-advanced.html



 */



